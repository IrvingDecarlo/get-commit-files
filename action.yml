name: "Get Modified Files"
description: "Fetches modified files based on the current event's commits and filters them."
icon: git-commit
color: orange

inputs:
  commits-json:
    description: "The current event's commits in JSON format."
    required: true
  git-branch:
    description: "The branch to fetch for modified files."
    required: true
  file-type:
    description: "The file extension to look for."
    required: false
  file-ignore:
    description: "The file name that, if found, will skip a file in the output."
    required: false
    
outputs:
  modified-files:
    description: "A comma-separated list of modified files."
    value: ${{ steps.get-commit-files.outputs.modified-files }}

runs:
  using: "composite"
  steps:
    - name: Get modified files
      id: get-commit-files
      shell: bash
      run: |
        # Gets modified files from the event's commits
        echo -e "\033[36mFetching modified ${{ inputs.file-type }} files in all commits from the event...\033[0m"

        # Output the event's commits.
        COMMITS_COUNT=$(jq '. | length' <<EOF
        ${{ inputs.commits-json }}
        EOF
        )
        if [ -z "$COMMITS_COUNT" ] || [ "$COMMITS_COUNT" -eq 0 ]; then
          echo "::error::Unable to determine the amount of commits in the event."
          exit 1
        fi
        echo -e "\033[36mCommits in the event ($COMMITS_COUNT):\033[0m"
        jq -r '.[].id' <<EOF
        ${{ inputs.commits-json }}
        EOF

        # Ensure the repository is fully fetched to the correct depth
        git fetch --prune --unshallow || true
        git fetch origin "${{ inputs.git-branch }}" --depth="$((COMMITS_COUNT+1))" || true

        # Get all modified files
        PREVIOUS_SHA=$(git rev-parse HEAD~$COMMITS_COUNT)
        CURRENT_SHA=$(jq -r '.[-1].id' <<EOF
        ${{ inputs.commits-json }}
        EOF
        )
        MODIFIED_PROJECTS=$(git diff --name-only $PREVIOUS_SHA..$CURRENT_SHA | grep "${{ inputs.file-type }}$" | sort | uniq || true)
        FILTERED_PROJECTS=""

        # Output modified files and filter by the file-ignore
        echo -e "\033[36mModified files:\033[0m"
        for project in $MODIFIED_PROJECTS; do
          PROJECT_DIR=$(dirname "$project")
          if [ -f "$PROJECT_DIR/${{ inputs.file-ignore }}" ]; then
            echo -e "\033[31m$project (skipped)\033[0m"
          else
            FILTERED_PROJECTS="$FILTERED_PROJECTS$project,"
            echo "$project"
          fi
        done
        FILTERED_PROJECTS=${FILTERED_PROJECTS%,}

        # Handle case where no files are modified
        if [ -z "$FILTERED_PROJECTS" ]; then
          echo -e "\033[33mNo modified ${{ inputs.file-type }} files found in the current event.\033[0m"
        fi
        
        echo "modified-files=$FILTERED_PROJECTS" >> $GITHUB_OUTPUT
